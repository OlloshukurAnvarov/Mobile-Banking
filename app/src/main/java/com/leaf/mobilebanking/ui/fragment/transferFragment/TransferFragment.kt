package com.leaf.mobilebanking.ui.fragment.transferFragmentimport android.os.Bundleimport android.view.Viewimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.lifecycleScopeimport androidx.lifecycle.repeatOnLifecycleimport androidx.navigation.fragment.findNavControllerimport by.kirich1409.viewbindingdelegate.viewBindingimport com.google.android.material.snackbar.Snackbarimport com.leaf.mobilebanking.Rimport com.leaf.mobilebanking.data.constants.ErrorCodesimport com.leaf.mobilebanking.databinding.FragmentTransferBindingimport com.leaf.mobilebanking.domain.entity.CardDataimport com.leaf.mobilebanking.extensions.formatterimport com.leaf.mobilebanking.extensions.toPanimport com.leaf.mobilebanking.ui.adapter.CardAdapterimport dagger.hilt.android.AndroidEntryPointimport kotlinx.coroutines.launch@AndroidEntryPointclass TransferFragment : Fragment(R.layout.fragment_transfer) {    private val binding: FragmentTransferBinding by viewBinding()    private val navController by lazy { findNavController() }    private val viewModel: TransferViewModel by viewModels()    private val data = ArrayList<CardData>()    private val adapter by lazy { CardAdapter(data) }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        binding.apply {            var _id = -1            viewModel.cards()            recycler.adapter = adapter            adapter.setOnClickListener {                _id = data[it].id            }            send.setOnClickListener {                errorMessage.visibility = View.VISIBLE                val to = cardNumberEdit.text.toString().toPan()                val amount = amount.text.toString()                viewModel.transferTo(_id, to, amount)            }            back.setOnClickListener {                navController.popBackStack()            }            formatter("[0000] [0000] [0000] [0000]", cardNumberEdit)        }        viewLifecycleOwner.lifecycleScope.launch {            repeatOnLifecycle(Lifecycle.State.RESUMED) {                launch {                    viewModel.cardsFlow.collect { cards ->                        if (cards.isEmpty())                            isEmpty(true)                        else                            isEmpty(false)                        data.clear()                        data.addAll(cards)                        adapter.notifyDataSetChanged()                    }                }                launch {                    viewModel.openVerifyFlow.collect {                        navController.navigate(R.id.action_transferFragment_to_confirmFragment)                    }                }                launch {                    viewModel.errorFlow.collect { error ->                        binding.errorMessage.visibility = View.VISIBLE                        binding.errorMessage.text = when (error) {                            ErrorCodes.CARD_ID_ERROR ->                                getString(R.string.tap_to_select_card)                            ErrorCodes.CARD_DIGITS_ERROR ->                                getString(R.string.invalid_card_number)                            ErrorCodes.CARD_AMOUNT_ERROR ->                                getString(R.string.can_not_send)                            else -> getString(R.string.something_wrong_please_try_again_later)                        }                    }                }                launch {                    viewModel.errorIOFlow.collect { message ->                        Snackbar.make(                            binding.send.rootView,                            message,                            Snackbar.LENGTH_SHORT                        )                            .setAnchorView(binding.send)                            .setAction("Action", null).show()                    }                }                launch {                    viewModel.noNetworkFlow.collect {                        Snackbar.make(                            binding.send.rootView,                            requireContext().getString(R.string.please_connect_to_internet),                            Snackbar.LENGTH_SHORT                        )                            .setAnchorView(binding.send)                            .setAction("Action", null).show()                    }                }            }        }    }    private fun isEmpty(value: Boolean) {        binding.apply {            if (value) {                recycler.visibility = View.GONE                emptyList.visibility = View.VISIBLE                emptyList.setOnClickListener {                    navController.navigate(R.id.action_homeFragment_to_refactorCardFragment)                }            } else {                viewModel.delaying()                recycler.visibility = View.VISIBLE                emptyList.visibility = View.GONE            }        }    }    override fun onResume() {        viewModel.cards()        super.onResume()    }}